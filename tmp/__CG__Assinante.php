<?php

namespace DoctrineProxies\__CG__;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Assinante extends \Assinante implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = ['endereco' => NULL, 'razao' => NULL, 'responsavel' => NULL, 'fantasia' => NULL, 'doc' => NULL, 'email' => NULL, 'telefone' => NULL, 'celular' => NULL, 'senha' => NULL, 'valor' => NULL, 'periodo' => 'mensal', 'status' => 'Ativo', 'dataCadastro' => NULL, 'diaVencimento' => NULL, 'logo' => NULL, 'hash_validacao_email' => NULL, 'email_validado' => false, 'teste' => false];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {
        unset($this->endereco, $this->razao, $this->responsavel, $this->fantasia, $this->doc, $this->email, $this->telefone, $this->celular, $this->senha, $this->valor, $this->periodo, $this->status, $this->dataCadastro, $this->diaVencimento, $this->logo, $this->hash_validacao_email, $this->email_validado, $this->teste);

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }

    /**
     * 
     * @param string $name
     */
    public function __get($name)
    {
        if (array_key_exists($name, $this->__getLazyProperties())) {
            $this->__initializer__ && $this->__initializer__->__invoke($this, '__get', [$name]);

            return $this->$name;
        }

        trigger_error(sprintf('Undefined property: %s::$%s', __CLASS__, $name), E_USER_NOTICE);
    }

    /**
     * 
     * @param string $name
     * @param mixed  $value
     */
    public function __set($name, $value)
    {
        if (array_key_exists($name, $this->__getLazyProperties())) {
            $this->__initializer__ && $this->__initializer__->__invoke($this, '__set', [$name, $value]);

            $this->$name = $value;

            return;
        }

        $this->$name = $value;
    }

    /**
     * 
     * @param  string $name
     * @return boolean
     */
    public function __isset($name)
    {
        if (array_key_exists($name, $this->__getLazyProperties())) {
            $this->__initializer__ && $this->__initializer__->__invoke($this, '__isset', [$name]);

            return isset($this->$name);
        }

        return false;
    }

    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'endereco', 'razao', 'responsavel', 'fantasia', 'doc', 'email', 'telefone', 'celular', 'senha', 'valor', 'periodo', 'status', 'dataCadastro', 'diaVencimento', 'logo', 'hash_validacao_email', 'email_validado', 'teste', 'statusOptions', 'identifier', 'listSeparator'];
        }

        return ['__isInitialized__', 'id', 'statusOptions', 'identifier', 'listSeparator'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Assinante $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

            unset($this->endereco, $this->razao, $this->responsavel, $this->fantasia, $this->doc, $this->email, $this->telefone, $this->celular, $this->senha, $this->valor, $this->periodo, $this->status, $this->dataCadastro, $this->diaVencimento, $this->logo, $this->hash_validacao_email, $this->email_validado, $this->teste);
        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getPeriodos()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPeriodos', []);

        return parent::getPeriodos();
    }

    /**
     * {@inheritDoc}
     */
    public function setDataCadastro($data)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDataCadastro', [$data]);

        return parent::setDataCadastro($data);
    }

    /**
     * {@inheritDoc}
     */
    public function getDataCadastro($format)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDataCadastro', [$format]);

        return parent::getDataCadastro($format);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescPacote()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescPacote', []);

        return parent::getDescPacote();
    }

    /**
     * {@inheritDoc}
     */
    public function getDiaVencimento()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDiaVencimento', []);

        return parent::getDiaVencimento();
    }

    /**
     * {@inheritDoc}
     */
    public function tryNewLogo($logoField, $JQFileUpload, $folder)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'tryNewLogo', [$logoField, $JQFileUpload, $folder]);

        return parent::tryNewLogo($logoField, $JQFileUpload, $folder);
    }

    /**
     * {@inheritDoc}
     */
    public function __call($name, $arguments)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__call', [$name, $arguments]);

        return parent::__call($name, $arguments);
    }

    /**
     * {@inheritDoc}
     */
    public function defineCallParam($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'defineCallParam', [$name]);

        return parent::defineCallParam($name);
    }

    /**
     * {@inheritDoc}
     */
    public function udata($data)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'udata', [$data]);

        return parent::udata($data);
    }

    /**
     * {@inheritDoc}
     */
    public function setData($data)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setData', [$data]);

        return parent::setData($data);
    }

    /**
     * {@inheritDoc}
     */
    public function checkAndConvertDataToDate($data)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'checkAndConvertDataToDate', [$data]);

        return parent::checkAndConvertDataToDate($data);
    }

    /**
     * {@inheritDoc}
     */
    public function getData($campo, $format)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getData', [$campo, $format]);

        return parent::getData($campo, $format);
    }

    /**
     * {@inheritDoc}
     */
    public function ptbrToFloat($valor)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'ptbrToFloat', [$valor]);

        return parent::ptbrToFloat($valor);
    }

    /**
     * {@inheritDoc}
     */
    public function getObject($param, $class)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getObject', [$param, $class]);

        return parent::getObject($param, $class);
    }

    /**
     * {@inheritDoc}
     */
    public function validaCnpj($cnpj)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'validaCnpj', [$cnpj]);

        return parent::validaCnpj($cnpj);
    }

}
